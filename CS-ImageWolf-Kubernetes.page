ImageWolf now has support for Kubernetes! We even made a video (see below)! If you want to see the code though, you can find it in its [normal place](https://github.com/ContainerSolutions/ImageWolf).

[![asciicast](https://asciinema.org/a/01rQtDxr67y4Gtu85KpBJ9cz2.png)](https://asciinema.org/a/01rQtDxr67y4Gtu85KpBJ9cz2)

That's great! but what is it? I'm glad you asked! Essentially, it's a service that aims to alleviate bottlenecks when deploying a new application over a cluster by leveraging the distributed BitTorrent protocol. That's quite a mouthful, so let's unpack it!

First though, let's look at the problem ImageWolf has been created to solve. Imagine you have a legion of servers running your application (under Kubernetes, Docker Swarm, etc.) A developer creates a cool new feature and wants to show it off to the world! Let's run through what they do!

The developer finishes writing their feature, and now they want to push it to production.
So they first wrap up their application in a Docker container, then they do a good old-fashioned `docker push <image>` into [the cloud](https://duckduckgo.com/?t=palemoon&q=the+cloud+is+just+someone+else%27s+computer&iax=1&ia=images).
(Note: **Please** run some tests first!). As anyone who has played with [ci/cd](https://www.docker.com/use-cases/cicd) knows, when that fateful push happens, an automated deployment should begin!

All this sounds pretty mundane so far... But what happens now? well all the nodes go and ask for the image from the registry, all 1000 of them, or all 3 of them. Now we have a problem! there are suddenly hundreds (or thousands) of nodes attempting to pull down the same image! The registry simply does not have the bandwidth to handle the simultaneous upload to many hundreds of locations! How do I know this? This is a [common](https://en.wikipedia.org/wiki/Denial-of-service_attack) [issue](https://en.wikipedia.org/wiki/Slashdot_effect) that is pretty well [understood](http://www.cs.umd.edu/~nick/papers/vldb92.pdf).

*Enter ImageWolf stage left*

So how does ImageWolf solve this problem? let's go back to the statement I made earlier:

It's a **service**...

A service in the context of both Kubernetes and Swarm means a program which runs on every node. A node is generally a single server (VM or dedicated box).

...that aims to **alleviate bottlenecks**...

We already know the bottleneck that we're trying to get around.

...when deploying a new application over a cluster by leveraging the distributed BitTorrent protocol.

At this point, we have a fairly clear idea of the high level idea of this project. When a new Image is pushed to the repository, ImageWolf downloads it automatically then seeds it to all other nodes in the cluster.

Now, when we trigger the deploy, every server has already got the image it is going to deploy locally, in cache! That is just about the best we can hope for! Start up time has been reduced quite considerably (we're talking up to 26x reduction in rollout speed!)

I have some numbers with me (not very scientific, granted, but pretty good), of running this on Kubernetes (I forgot to time Swarm)! The difference in startup performance is pretty pronounced!

Below, we see starting a Kubernetes Deployment with a warmed cache:

```
moredhel@box:/data/src/golang-1.7/ImageWolf$ kubectl run wordpress --image=moredhel/wordpress:$VERSION --replicas=3 \
&& time -p kubectl rollout status deployment wordpress                                                                                                                                    
deployment "wordpress" created                                                                                                                         
Waiting for rollout to finish: 0 of 3 updated replicas are available...                                                                                
Waiting for rollout to finish: 1 of 3 updated replicas are available...                                                                                
Waiting for rollout to finish: 2 of 3 updated replicas are available...                                                                                
deployment "wordpress" successfully rolled out                                                                                                         
real 1.15                                                                                                                                              
user 0.15                                                                                                                                              
sys 0.01
```

1.15 seconds! pretty good! I would also like to apologise for the inappropriately long command, It was how I managed to time how long a rollout took...

Back on topic! let's see *how* much better we just performed relative to a normal, cacheless pull from the docker registry:

```
moredhel@box:/data/src/golang-1.7/ImageWolf$ kubectl run ghost --image=ghost:0.11 --replicas=3 \
&& time -p kubectl rollout status deployment ghost deployment "ghost" created                                                                                                                             
Waiting for rollout to finish: 0 of 3 updated replicas are available...                                                                                
Waiting for rollout to finish: 1 of 3 updated replicas are available...                                                                                
Waiting for rollout to finish: 2 of 3 updated replicas are available...                                                                                
deployment "ghost" successfully rolled out                                                                                                             
real 27.22                                                                                                                                             
user 0.16                                                                                                                                              
sys 0.00
```

That is a pretty big number! And we're only deploying to 3 nodes! This will just get worse as more nodes are added to the cluster! Give it a try! be amazed! come back when you break it (because I want to make it better!).

TLDR; we used BitTorrent for something! [https://github.com/ContainerSolutions/ImageWolf]()