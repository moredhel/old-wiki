I don't know about you, but I find it extremely frustrating when I'm working in the terminal, pop open a second terminal to run a second command, then have to _cd_ back to where I was.  
This is something has plagued me for a while, until such a point that I decided I would have a think about how I could solve it. Below is the solution I came up with.

I had some basic criteria:

- I didn't want to change any of my workflow, I still wanted to use _cd_ to traverse the filesystem.

- I wanted it to be portable, (I work on a number of systems, linux, osx, bash, zsh) and want a solution that works with everything.

- fast and lightweight, (I don't care about history, although it can fairly trivially be extended to allow for it).

My initial thought was to write something in ruby, or python. But I want something fast. I then thought writing a C program would be fun, but the overhead of actually learning C felt a little high for something so tiny.

I ended up going for some simple bash. simply writing a bash script that overrides default behaviour is actually quite simple to do. Any of you who have played with `alias` have seen that you can simply do something like this: `alias vim="vim -F && emacs -nw"`, just to wreak havoc.

Looking more into this, I came up with a fairly simple solution:

Starting with overriding the _cd_ function

```
cd () {
    builtin cd "$1"
    echo `pwd` > ~/.last_location
}
```

the above simply performs the expected _cd_ call, (as bash allows recursive calls of functions, you must use the _builtin_ keyword). but the second step is what we want. Whenever we _cd_ to a new directory, we want to get the current directory, and store it. In this case we are storing it in `~/.last_location`.

Well that's great! now, whenever we _cd_ somewhere, our working directory is saved.

The next step is simply to add a _cd_ call at the end of our respective _(bash|zsh)rc_ files, and we will automagically jump to our last visited directory.

```
cd "`cat ~/.last_location`"
```

note the `"` surrounding the call to _cat_. This is needed so that you can navigate to directories with a space in them.

I hope this tip is useful for some, as I know it saves me many hours of jumping through directories to find where I'm meant to be.

/_moredhel_